import requests
import pandas as pd
import time
import numpy as np
import requests_cache
import regex as re

start=time.process_time()
requests_cache.install_cache()

#Pull Data
ACS_Detailed_Table_Base_URL='https://api.census.gov/data/%s/acs/acs5?get=NAME,%s&for=%s'

#Table
Total_Ed='B06009_001E'
Bachelors='B06009_005E'
Grad_or_Prof_Degree='B06009_006E'
Population='B01003_001E'
Total_Gender= 'B01001_001E'
Male='B01001_002E'
Total_Race='B02001_001E'
White = 'B02001_002E'
Black = 'B02001_003E'
American_Indian = 'B02001_004E'
Asian = 'B02001_005E'
Total_Commute = 'B08006_001E'
Drive_Commute= 'B08006_002E'
Pub_Trans = 'B08006_008E'
Walked= 'B08006_015E'
Bicycle = 'B08006_014E'
Total_Poverty = 'B05010_001E'
Impoverished = 'B05010_002E'
Median_Income = 'B06011_001E'

#Geography
PlacewithinState='place'
County_Subdivision_Mass='county+subdivision:*&in=state:25'
County_Subdivision_Penn='county+subdivision:*&in=state:42'
County_Subdivision_NH='county+subdivision:*&in=state:33'
County_Mizzo='county'


#define functions
def LowerCase(lst):
    return [x.lower() for x in lst]
def ExtractCityNameAndDate(city):
    return [item[:2] for item in city]
def DeletePls(lst,string):
    return[x for x in lst if string not in x]
def getUniqueItems(iterable):
    result = []
    for item in iterable:
        if item not in result:
            result.append(item)
    return result
def datatype(citylist,name):
    for x in citylist:
        x.append(name)
def checkio(data):
    a=[i for i in data if data.count(i)>1]
    return a
def MatchIndicesDel(city2,word):
    return[city2.index(i) for i in city2 if word not in i]
def MatchCityNames(city2,word):
    return[x for x in city2 if word in x]
def MatchIndices(city2,word):
    return[city2.index(i) for i in city2 if word in i] 
def Deletion(listofdeletion, words):
    for x in listofdeletion:
        if words in x[0]:
            a=listofdeletion.index(x)
            listofdeletion.pop(a)


#Create Lists
xls=pd.ExcelFile(r'C:\Users\alexanderryan\Documents\Net Zero\Net Zero Cities.xlsx')

Place_net_xls_18 = pd.read_excel(xls, sheet_name="Place (net) (18)")
Place_non_xls_18 = pd.read_excel(xls, sheet_name="Place (non) (18)")
Place_net_xls_11_17 = pd.read_excel(xls, sheet_name="Place (net) (11-17)")
Place_non_xls_12_17 = pd.read_excel(xls, sheet_name="Place (non) (12-17)")
Place_non_xls_11 = pd.read_excel(xls, sheet_name="Place (non) (11)")
Place_net_xls_15=pd.read_excel(xls, sheet_name="Place (net) (15)")

Countyxls = pd.read_excel(xls,sheet_name="County")
Subcounty_PAxls=pd.read_excel(xls,sheet_name='Subcounty_PA')
Subcounty_MAxls=pd.read_excel(xls,sheet_name='Subcounty_MA')
Subcounty_NHxls=pd.read_excel(xls,sheet_name='Subcounty_NH')

Place_net_df_18 = pd.DataFrame(Place_net_xls_18, columns= ['City'])
Place_non_df_18 = pd.DataFrame(Place_non_xls_18, columns= ['City'])
Place_net_df_11_17 = pd.DataFrame(Place_net_xls_11_17, columns= ['City'])
Place_non_df_12_17 = pd.DataFrame(Place_non_xls_12_17, columns= ['City'])
Place_non_df_11 = pd.DataFrame(Place_non_xls_11, columns= ['City'])
Place_net_df_15 = pd.DataFrame(Place_net_xls_15, columns=['City'])
Countydf = pd.DataFrame(Countyxls, columns=['City'])
Subcounty_PAdf = pd.DataFrame(Subcounty_PAxls, columns=['City'])
Subcounty_MAdf = pd.DataFrame(Subcounty_MAxls, columns=['City'])
Subcounty_NHdf = pd.DataFrame(Subcounty_NHxls, columns=['City'])

PlaceWithinState_Upper_net_18=Place_net_df_18['City'].tolist()
PlaceWithinState_Upper_non_18=Place_non_df_18['City'].tolist()
PlaceWithinState_Upper_net_11_17=Place_net_df_11_17['City'].tolist()
PlaceWithinState_Upper_non_12_17=Place_non_df_12_17['City'].tolist()
PlaceWithinState_Upper_non_11=Place_non_df_11['City'].tolist()
PlaceWithinState_Upper_net_15=Place_net_df_15['City'].tolist()

County_Upper=Countydf['City'].tolist()
Subcounty_PA_Upper=Subcounty_PAdf['City'].tolist()
Subcounty_MA_Upper=Subcounty_MAdf['City'].tolist()
Subcounty_NH_Upper=Subcounty_NHdf['City'].tolist()

PlaceWithinState_net_18=LowerCase(PlaceWithinState_Upper_net_18)
Full_Cities_non_18=LowerCase(PlaceWithinState_Upper_non_18)
PlaceWithinState_net_11_17=LowerCase(PlaceWithinState_Upper_net_11_17)
Full_Cities_non_12=LowerCase(PlaceWithinState_Upper_non_12_17)
Full_Cities_non_11=LowerCase(PlaceWithinState_Upper_non_11)
PlaceWithinState_net_15=LowerCase(PlaceWithinState_Upper_net_15)

County=LowerCase(County_Upper)
Subcounty_PA=LowerCase(Subcounty_PA_Upper)
Subcounty_MA=LowerCase(Subcounty_MA_Upper)
Subcounty_NH=LowerCase(Subcounty_NH_Upper)

County_Subdivision = Subcounty_PA + Subcounty_MA + Subcounty_NH
Full_Cities_net_18=County_Subdivision+PlaceWithinState_net_18+County
Full_Cities_net_11=County_Subdivision+PlaceWithinState_net_11_17+County
Full_Cities_net_15=County_Subdivision+PlaceWithinState_net_15+County


Remove_Net=['Lake St. Louis city, Missouri','South San Francisco city, California','Upper Uwchlan township, Chester County, Pennsylvania','West Chicago city, Illinois','North Chicago city, Illinois','East Cleveland city, Ohio','West Conshohocken borough, Pennsylvania','North Kansas City city, Missouri','East Palo Alto city, California','North St. Paul city, Minnesota','South St. Paul city, Minnesota','West St. Paul city, Minnesota','South Burlington city, Vermont','West Columbia city, South Carolina', 'South Ogden city, Utah','North Ogden city, Utah','East Helena city, Montana']
Remove_Non=['New Lexington village, Ohio', 'South Pasadena city, California', 'West Sacramento city, California', 'South Tucson city, Arizona', 'South Houston city, Texas', 'North Las Vegas city, Nevada']

Years_2018 = range(2018,2019)
Years_2012_17 = range(2012,2018)
Years_2011 = range(2011,2012)
Net_Pop_df=[]
Non_Pop_df=[]

#Update Here
for x in [2015]:
    #Request Census Data
    response_PlaceWithinState=requests.get(ACS_Detailed_Table_Base_URL % (x,Median_Income,PlacewithinState))
    response_County_Subdivision_Mass=requests.get(ACS_Detailed_Table_Base_URL % (x,Median_Income,County_Subdivision_Mass))
    response_County_Subdivision_Penn=requests.get(ACS_Detailed_Table_Base_URL % (x,Median_Income,County_Subdivision_Penn))
    response_County_Subdivision_NH=requests.get(ACS_Detailed_Table_Base_URL % (x,Median_Income,County_Subdivision_NH))
    response_County=requests.get(ACS_Detailed_Table_Base_URL % (x,Median_Income, County_Mizzo))
    #Convert to json
    json_results_PlaceWithinState=response_PlaceWithinState.json()
    json_results_County_Subdivision_Mass=response_County_Subdivision_Mass.json()
    json_results_County_Subdivision_Penn=response_County_Subdivision_Penn.json()
    json_results_County_Subdivision_NH=response_County_Subdivision_NH.json()
    json_results_County=response_County.json()
    #edit lists
    json_results_Subcounty=json_results_County_Subdivision_NH+json_results_County_Subdivision_Penn+json_results_County_Subdivision_Mass
    Deletion(json_results_County,'St. Louis city, Missouri')
    Deletion(json_results_County,'Hampton city, Virginia')
    Deletion(json_results_County,'Fredericksburg city, Virginia')
    Deletion(json_results_County, 'Virginia Beach city, Virginia')
    datatype(json_results_PlaceWithinState,"place")
    datatype(json_results_County,"county")
    datatype(json_results_Subcounty,"subcounty")
    for k in json_results_Subcounty:
        k.pop(3)

    json_full=json_results_Subcounty+json_results_County+json_results_PlaceWithinState
    json_excl_county=json_results_Subcounty+json_results_PlaceWithinState

    #Pull Net Zero Cities and Pop
    def Compiled(json_pull,ListofCitiesToDelete,FullListofCities):
        Census_Cities_Full=json_pull
        for eachcity in ListofCitiesToDelete:
            Deletion(Census_Cities_Full,eachcity)
        Census_Cities=[]
        Census_Data=[]
        Census_State=[]
        Census_FIPS=[]
        Census_Type=[]
        for separatecolumns in Census_Cities_Full:
            Census_Cities.append(separatecolumns[0])
            Census_Data.append(separatecolumns[1])
            Census_State.append(separatecolumns[2])
            Census_FIPS.append(separatecolumns[3])
            Census_Type.append(separatecolumns[4])
        Lower_Census_Cities=LowerCase(Census_Cities)

        Matching_City_Names=[]
        for L in FullListofCities:
            Matching_City_Names.append(str(MatchCityNames(Lower_Census_Cities,L)).replace('[','').replace(']','').replace("'",""))
        Matching_Cities_Index=[]
        for m in FullListofCities:
            Matching_Cities_Index.append(int(str(MatchIndices(Lower_Census_Cities,m)).replace('[','').replace(']','')))
        Matching_Data=[]
        Matching_States=[]
        Matching_FIPS=[]
        Matching_Type=[]
        for w in Matching_Cities_Index:
            
            Matching_Data.append(int(Census_Data[w]))
            Matching_States.append(Census_State[w])
            Matching_FIPS.append(Census_FIPS[w])
            Matching_Type.append(Census_Type[w])
        NameofDataFrameFinal=pd.DataFrame(Matching_Data)
        NameofDataFrameFinal.columns= ['Population']
        NameofDataFrameFinal['City']= Matching_City_Names
        NameofDataFrameFinal['State']=Matching_States
        NameofDataFrameFinal['FIPS']=Matching_FIPS
        NameofDataFrameFinal['Type']=Matching_Type
        Year=[]
        for z in range(0,162):
            Year.append(x)
        return NameofDataFrameFinal
    
    #Update 
    
    Non_Cities_Pop=Compiled(json_full,Remove_Non,Full_Cities_non_12)
    Net_Cities_Pop=Compiled(json_full,Remove_Net,Full_Cities_net_15)
    Net_Pop_df.append(Net_Cities_Pop)
    Non_Pop_df.append(Non_Cities_Pop)
    
#Update here
writer = pd.ExcelWriter(r'C:\Users\alexanderryan\Documents\Net Zero\Median Income_Net City Data_15.xlsx', engine='xlsxwriter')


appended_data1=pd.concat(Net_Pop_df)
appended_data2=pd.concat(Non_Pop_df)

appended_data1.to_excel(writer, sheet_name='Net')
appended_data2.to_excel(writer, sheet_name='Non')

writer.save()
print(time.process_time() - start)
