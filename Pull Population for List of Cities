#import packages

import requests
import pandas as pd
import time
import numpy as np
import requests_cache


#Identify Census URL for API Request (below is base URL for 2018 ACS reqests)
ACS_17_Detailed_Table_Base_URL='https://api.census.gov/data/2018/acs/acs5?get=NAME,%s&for=%s'

#Identify ACS Table (below is total estimated population) 
Population='B01003_001E'

#Identify Geography
PlacewithinState='place'
County_Subdivision_Mass='county+subdivision:*&in=state:25'
County_Subdivision_Penn='county+subdivision:*&in=state:42'
County_Subdivision_NH='county+subdivision:*&in=state:33'
County_Mizzo='county'


# Define Functions

def LowerCase(lst):
    return [x.lower() for x in lst]
def ExtractCityNameAndDate(city):
    return [item[:2] for item in city]
def DeletePls(lst,string):
    return[x for x in lst if string not in x]
def getUniqueItems(iterable):
    result = []
    for item in iterable:
        if item not in result:
            result.append(item)
    return result
def checkio(data):
    a=[i for i in data if data.count(i)>1]
    return a
def MatchIndicesDel(city2,word):
    return[city2.index(i) for i in city2 if word not in i]
def MatchCityNames(city2,word):
    return[x for x in city2 if word in x]
def MatchIndices(city2,word):
    return[city2.index(i) for i in city2 if word in i] 
def Deletion(listofdeletion, words):
    for x in listofdeletion:
        if words in x[0]:
            a=listofdeletion.index(x)
            listofdeletion.pop(a)


#Upload cities to identify from local file, create dataframe
xls=pd.ExcelFile(r'C:\Users\alexanderryan\Documents\Net Zero\PlaceWithinCity.xlsx')

Placexls = pd.read_excel(xls, sheet_name="Place")
Countyxls = pd.read_excel(xls,sheet_name="County")
Subcounty_PAxls=pd.read_excel(xls,sheet_name='Subcounty_PA')
Subcounty_MAxls=pd.read_excel(xls,sheet_name='Subcounty_MA')
Subcounty_NHxls=pd.read_excel(xls,sheet_name='Subcounty_NH')

Placedf = pd.DataFrame(Placexls, columns= ['City'])
Countydf = pd.DataFrame(Countyxls, columns=['City'])
Subcounty_PAdf = pd.DataFrame(Subcounty_PAxls, columns=['City'])
Subcounty_MAdf = pd.DataFrame(Subcounty_MAxls, columns=['City'])
Subcounty_NHdf = pd.DataFrame(Subcounty_NHxls, columns=['City'])

PlaceWithinState_Upper=Placedf['City'].tolist()
County_Upper=Countydf['City'].tolist()
Subcounty_PA_Upper=Subcounty_PAdf['City'].tolist()
Subcounty_MA_Upper=Subcounty_MAdf['City'].tolist()
Subcounty_NH_Upper=Subcounty_NHdf['City'].tolist()

PlaceWithinState=LowerCase(PlaceWithinState_Upper)
County=LowerCase(County_Upper)
Subcounty_PA=LowerCase(Subcounty_PA_Upper)
Subcounty_MA=LowerCase(Subcounty_MA_Upper)
Subcounty_NH=LowerCase(Subcounty_NH_Upper)

County_Subdivision = Subcounty_PA + Subcounty_MA + Subcounty_NH
Full_Cities=County_Subdivision+PlaceWithinState+County

Remove=['Lake St. Louis city, Missouri','South San Francisco city, California','Upper Uwchlan township, Chester County, Pennsylvania','West Chicago city, Illinois','North Chicago city, Illinois','East Cleveland city, Ohio','West Conshohocken borough, Pennsylvania','North Kansas City city, Missouri','East Palo Alto city, California','North St. Paul city, Minnesota','South St. Paul city, Minnesota','West St. Paul city, Minnesota','South Burlington city, Vermont','West Columbia city, South Carolina', 'South Ogden city, Utah','North Ogden city, Utah','East Helena city, Montana']

Full_Cities=County_Subdivision+PlaceWithinState+County



#Pull Census Data for States, County_Subdivision, County
response_PlaceWithinState=requests.get(ACS_17_Detailed_Table_Base_URL % (Population,PlacewithinState))

response_County_Subdivision_Mass=requests.get(ACS_17_Detailed_Table_Base_URL % (Population,County_Subdivision_Mass))
response_County_Subdivision_Penn=requests.get(ACS_17_Detailed_Table_Base_URL % (Population,County_Subdivision_Penn))
response_County_Subdivision_NH=requests.get(ACS_17_Detailed_Table_Base_URL % (Population,County_Subdivision_NH))

response_County=requests.get(ACS_17_Detailed_Table_Base_URL % (Population, County_Mizzo))

json_results_PlaceWithinState=response_PlaceWithinState.json()

json_results_County_Subdivision_Mass=response_County_Subdivision_Mass.json()
json_results_County_Subdivision_Penn=response_County_Subdivision_Penn.json()
json_results_County_Subdivision_NH=response_County_Subdivision_NH.json()

json_results_County=response_County.json()
Deletion(json_results_County,'St. Louis city, Missouri')
json_full=json_results_County_Subdivision_Mass+json_results_County_Subdivision_Penn+json_results_County_Subdivision_NH+json_results_County+json_results_PlaceWithinState
json_excl_county=json_results_County_Subdivision_Mass+json_results_County_Subdivision_Penn+json_results_County_Subdivision_NH+json_results_PlaceWithinState

#Pull Net Zero Cities and Population
def Compiled(json_pull,ListofCitiesToDelete,FullListofCities):
    Census_Cities_Full=(ExtractCityNameAndDate(json_pull))
    for eachcity in ListofCitiesToDelete:
        Deletion(Census_Cities_Full,eachcity)
    Census_Cities=[]
    Census_Data=[]
    for separatecolumns in Census_Cities_Full:
        Census_Cities.append(separatecolumns[0])
        Census_Data.append(separatecolumns[1])
    Lower_Census_Cities=LowerCase(Census_Cities)
    Matching_City_Names=[]
    for L in FullListofCities:
        Matching_City_Names.append(str(MatchCityNames(Lower_Census_Cities,L)).replace('[','').replace(']','').replace("'",""))
    Matching_Cities_Index=[]
    for m in FullListofCities:
        Matching_Cities_Index.append(int(str(MatchIndices(Lower_Census_Cities,m)).replace('[','').replace(']','')))
    Matching_Data=[]
    for w in Matching_Cities_Index:
        Matching_Data.append(int(Census_Data[w]))
    NameofDataFrameFinal=pd.DataFrame(Matching_Data)
    NameofDataFrameFinal.columns= ['Population']
    NameofDataFrameFinal['City']= Matching_City_Names
    return NameofDataFrameFinal

#Run Function and Pull Data for Cities
Full_Cities_Pop=Compiled(json_full,Remove,Full_Cities)
